
// Mixins

// Responsive breakpoints
$size-xs = 48rem
$size-sm = 60rem
$size-md = 84rem
$size-lg = 96rem

calc($expr...)
  'calc(%s)' % $expr

clearfix()
  &:after
    clear both
    content ' '
    display table

block()
  &:not(:last-child)
    margin-bottom 1.5rem

overflow-touch()
  -webkit-overflow-scrolling touch

unselectable()
  -webkit-touch-callout none
  -webkit-user-select none
  -moz-user-select none
  -ms-user-select none
  user-select none

overlay($offset = 0)
  bottom $offset
  left $offset
  position absolute
  right $offset
  top $offset
  
border-top-radius($radius)
  border-top-left-radius $radius
  border-top-right-radius $radius

border-right-radius($radius)
  border-top-right-radius $radius
  border-bottom-right-radius $radius

border-bottom-radius($radius)
  border-bottom-left-radius $radius
  border-bottom-right-radius $radius

border-left-radius($radius)
  border-top-left-radius $radius
  border-bottom-left-radius $radius

media($media-size)
  if $media-size = xs
    @media screen and (max-width: $size-xs)
      {block}
  if $media-size = sm
    @media screen and (max-width: $size-sm)
      {block}
  if $media-size = md
    @media screen and (max-width: $size-md)
      {block}
  if $media-size = lg
    @media screen and (max-width: $size-lg)
      {block}

from($media-size)
  if $media-size = xs
    @media screen and (min-width: $size-xs)
      {block}
  if $media-size = sm
    @media screen and (min-width: $size-sm)
      {block}
  if $media-size = md
    @media screen and (min-width: $size-md)
      {block}
  if $media-size = lg
    @media screen and (min-width: $size-lg)
      {block}

shadow($offset)
  box-shadow 0 $offset ($offset + .1rem)*4 alpha($color-black, .6)

core-shadow($color = $color-black)
  box-shadow 0 .2rem .4rem 0 alpha($color, .1)

control-shadow($color)
  box-shadow 0 0 0 .26rem alpha($color, .4)

power-number($number, $exp)
  $value = 1
  if $exp > 0
    for $i in (1..$exp)
      $value = $value * $number
  else if $exp < 0
    for $i in (1..-$exp)
      $value = $value / $number
  return $value
  
color-luminance($color)
  $color-rgb = {
    red: red($color),
    green: green($color),
    blue: blue($color)
  }
  for $name, $value in $color-rgb
    $adjusted = 0
    $value = $value / 255
    if $value < .03928
      $value = $value / 12.92
    else
      $value = ($value + .055) / 1.055
      $value = power-number($value, 2)
  $color-rgb = merge($color-rgb, ($name = $value))
  return ($color-rgb['red'] * .2126) + ($color-rgb['green'] * .7152) + ($color-rgb['blue'] * .0722)
  
find-color-invert($color)
  if (color-luminance($color * 0.01) > 2)
    return darken($color, 45%)
  else
    return $color-white
    
// for name, color in colors
//   $color = color["color"]
//   $invert = color["invert"]
//   a.{name}
//     color color-luminance($color * 0.01)
